# Custom values for the event-exporter chart
# These will override the default values from the base chart

# Service account configuration for AWS Secrets Manager access
# This ServiceAccount will be annotated with the IAM role for fetching secrets
serviceAccount:
  name: event-exporter
  # The role ARN should match the one created by CDKTF app-iam module
  # The format is: ${cluster-name}-${namespace}-${app-name}-role
  roleArn: "arn:aws:iam::961341519925:role/layerx-eks-monitoring-event-exporter-role" # Will be replaced with the actual role ARN from CDKTF outputs
  # Example: "arn:aws:iam::123456789012:role/layerx-eks-monitoring-event-exporter-role"

# External Secrets configuration
# This tells the External Secrets Operator which AWS secret to fetch
externalSecrets:
  enabled: true
  region: "eu-central-1"  # Region where your secrets are stored
  secretName: "home-assignments/layerx"  # Name of your secret in AWS Secrets Manager
  # Note: The AWS secret should contain a key "slack-webhook-url" with the webhook URL

kubernetes-event-exporter:
  # All values under this key will be passed to the base chart
  config:
    logLevel: info
    logFormat: json
    receivers:
      - name: default
        stdout: {}
      - name: slack
        slack:
          # Reference the token from the Kubernetes Secret
          # This Secret is created by the ExternalSecret in templates/external-secrets.yaml
          # which fetches the value from AWS Secrets Manager
          token: "${SLACK_TOKEN}"  # Will be replaced with the token from the secret
          channel: "#k8s-events"
          message: "ðŸ”” *Kubernetes Event Alert*\n*Cluster:* {{ .Cluster }}\n*Type:* {{ .Type }}\n*Reason:* {{ .Reason }}"
          color: "danger"
          title: "Kubernetes Event Alert"
          fields:
            namespace: "{{ .InvolvedObject.Namespace }}"
            reason: "{{ .Reason }}"
            component: "{{ .Component }}"
            object: "{{ .InvolvedObject.Kind }}/{{ .InvolvedObject.Name }}"
    route:
      routes:
        - receiver: default
          # Match all events that are not handled by the Slack receiver
          match:
            - type: Normal
        - receiver: slack
          # Match all events that should be sent to Slack
          match:
            - type: Warning
            - type: Error
            - type: Critical
  
  # Add environment variables to inject the token from the secret
  extraEnvVars:
    - name: SLACK_TOKEN
      valueFrom:
        secretKeyRef:
          name: slack-webhook
          key: token
